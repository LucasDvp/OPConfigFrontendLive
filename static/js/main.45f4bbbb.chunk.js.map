{"version":3,"sources":["components/BooleanConfig.js","components/MetadataItemConfig.js","components/MetadataDiscovery.js","components/MetadataSetting.js","components/OutputConfig.js","components/EmailConfigs.js","components/StringWithTitleConfig.js","components/RepoConfigs.js","components/MetadataRegister.js","components/NewMetadata.js","components/FunctionalSubContent.js","components/OldMetadataSetting.js","components/FunctionalSetting.js","components/Metadata.js","components/Functional.js","serviceWorker.js","index.js","App.js"],"names":["BooleanConfig","_ref","keyName","des","checked","react_default","a","createElement","style","display","flexDirection","alignItems","justifyContent","margin","tooltip","title","icon","type","theme","col","es_switch","defaultChecked","InputGroup","Input","Group","MetadataItemConfig","state","showInput","clickShowFileScopeToggle","oldShowInput","_this","setState","_this$props","this","props","fileJson","value","_this$props$hasFileMe","hasFileMetadata","_this$props$showFileM","showFileMetadata","hint","fileMetadataContent","input","addonBefore","placeholder","defaultValue","addonAfter","onClick","es_button","disabled","marginBottom","size","marginTop","span","Component","ListItem","List","Item","Search","TabPane","Tabs","colors","Page element","Reference","Archived","Navigation on page","URL","Versioning","Localization","Cross Repository","Build output","MetadataButton","isSelected","onToggleMetadata","TitleBox","_ref2","groupNickName","color","row","gutter","tag","MetadataDiscovery","initState","componentWillReceiveProps","o","nextProps","onTabClick","onClose","onCancel","onSubmitMetadatas","selectedMetadatas","_","filter","metadatas","metadataKey","oldMetadata","find","subGroup","metadata","assign","_this2","isOpen","listContainerStyle","height","overflowY","groupedMetadata","groupBy","groupedMetadataItems","keys","map","groupName","index","tab","key","list","child","actions","Meta","description","drawer","width","visible","enterButton","tabs","defaultActiveKey","onChange","position","bottom","left","padding","backgroundColor","block","globalMetadatas","MetadataSetting","openAddMetadata","onToggleAddMetadata","addMetadataToPanel","name","isChecked","metadataSet","metadataItems","MetadataItemConfig_MetadataItemConfig","divider","MetadataDiscovery_MetadataDiscovery","Option","Select","OutputConfig","branches","selected","options","branch","es_select","mode","EmailConfigs","items","emails","email","EmailConfigs_ListItem","href","marginLeft","bordered","StringWithTitleConfig","justify","fontSize","fontWeight","RepoConfigs","FormItem","Form","TextArea","formItemLayout","labelCol","xs","sm","wrapperCol","fullWidthItemLayout","metadataType","MetadataRegisterForm","onAddMetadataSet","e","preventDefault","form","validateFields","err","values","group","first","validateValueExist","rule","callback","valueArray","names","console","log","includes","concat","getFieldDecorator","es_form","onSubmit","Object","label","rules","required","message","validator","MetadataRegister_Option","allowClear","notFoundContent","groups","rows","valuePropName","getValueFromEvent","normFile","upload","Dragger","action","className","htmlType","uniq","MetadataRegister","showMetadataRegister","MetadataRegistrationForm","create","Header","Layout","Sider","Content","SubMenu","Menu","menuName","docset1Metadatas","docset2Metadatas","NewMetadata","collapsed","selectedContent","docsetMetadata1","docsetMetadata2","toggle","menuClick","valuesToBeAdded","item","hintValue","parseInt","uniqBy","newMetadata","success","onToggleMetadataRegister","contentRender","RepoConfigs_RepoConfigs","MetadataSetting_MetadataSetting","content","layout","trigger","collapsible","menu","defaultSelectedKeys","defaultOpenKeys","textAlign","background","paddingLeft","MetadataRegister_MetadataRegister","typeColorMap","string","bool","one or many","object","number","FunctionalItem","getInput","checkedChildren","unCheckedChildren","input_number","itemKey","keyDes","outDated","fileMetadata","fileMetadataKey","fileMetadataType","fileMetadataValue","fileMetadataDes","collapse","Panel","header","FunctionalSubContent","selectedMenuKey","isEqual","subGroups","handleSubGroupClick","_this$props2","updatedItemNums","subGroupItems","subGroupNames","subGroupItemHasOutDatedValues","clone","forEach","set","isEmpty","selectedSubGroupName","selectedSubGroupDes","selectedSubGroupImgUrl","imgurl","idx","badge","dot","twoToneColor","border","src","alt","FunctionalSubContent_FunctionalItem","OldMetadataSetting","Tab","FunctionalSetting","getGroupedCount","reduce","result","hasOwnProperty","docsetName","oldMetadatasNum","newMetadatasNum","mapValues","onClickTabs","newUpdatedItemNums","newMetadatas","onFakeChangeMetadatas","onRenderPages","FunctionalSubContent_FunctionalSubContent","groupedItems","tabItems","didUpdated","groupItems","Metadata","onAddMetadata","Metadata_Sider","Metadata_Header","onToggleCollapsed","Metadata_Content","FunctionalSetting_FunctionalSetting","menuNames","docsetsMetadatas","Functional","flattenMetadatas","flatMap","Functional_Sider","Functional_Header","Functional_Content","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45f4bbbb.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Switch, Col, Tooltip, Icon } from 'antd'\r\n\r\nexport default function BooleanConfig({keyName, des, checked}) {\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', margin: '15px 0'}}>\r\n            <div style={{display: 'flex'}}>\r\n                <h3>{keyName}</h3>\r\n                <Tooltip title={des}>\r\n                    <Icon type=\"info-circle\" theme=\"twoTone\" style={{margin: '3px'}}/>\r\n                </Tooltip>\r\n            </div>\r\n            <Col>\r\n                <Switch defaultChecked={checked} />\r\n            </Col>\r\n        </div>\r\n    )\r\n}","import React, {Component} from 'react'\r\nimport { Input, Col, Button, Icon } from 'antd'\r\n\r\nconst InputGroup = Input.Group\r\nexport default class MetadataItemConfig extends Component {\r\n\r\n    state = {\r\n        showInput: false\r\n    }\r\n\r\n    clickShowFileScopeToggle = () => {\r\n        const oldShowInput = this.state.showInput\r\n        this.setState({\r\n            showInput: !oldShowInput\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyName, fileJson, value, hasFileMetadata=false, showFileMetadata=true, hint } = this.props\r\n        let fileMetadataContent = this.state.showInput ? \r\n           \r\n            <Input addonBefore=\"File Scope\" placeholder=\"default is global scope\" defaultValue={fileJson} addonAfter={<a onClick={this.clickShowFileScopeToggle}><Icon type='check'/></a>}/>\r\n            : \r\n            <Button type='primary' icon='copy' disabled={!hasFileMetadata} onClick={this.clickShowFileScopeToggle}>Show File Scope</Button>\r\n        \r\n        return (\r\n            <div style={{marginBottom: '15px'}}>\r\n                <InputGroup size=\"large\" style={{ display: 'flex', marginTop: '10px', justifyContent: 'space-between'}}>\r\n                    <Col span={6}>\r\n                        <Input defaultValue={keyName} />\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Input defaultValue={value} placeholder={hint} />\r\n                    </Col>\r\n                    <Col style={{display: showFileMetadata ? 'default' : 'none' }}>\r\n                        {fileMetadataContent}\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type='primary'>Delete</Button>\r\n                    </Col>\r\n                </InputGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { List, Button, Drawer, Input, Tabs, Tag, Row, Col, Alert, Badge } from 'antd'\r\nimport _ from 'lodash'\r\nimport '../MetadataDiscovery.css'\r\n\r\nconst ListItem = List.Item\r\nconst Search = Input.Search\r\nconst TabPane = Tabs.TabPane \r\nconst colors = {\r\n    'Page element': 'magenta',\r\n    'Reference': 'orange', \r\n    'Archived': 'green', \r\n    'Navigation on page': 'yellow',\r\n    'URL': 'orange', \r\n    'Versioning': 'cyan', \r\n    'Localization': 'blue', \r\n    'Cross Repository': 'purple',\r\n    'Build output': 'black'\r\n}\r\nfunction MetadataButton({ isSelected, onToggleMetadata }) {\r\n    return (\r\n        <Button type={isSelected ? 'danger' : 'primary'} onClick={onToggleMetadata}>\r\n            {isSelected ? 'Remove' : 'Add'}\r\n        </Button>\r\n    )\r\n}\r\nfunction TitleBox({ title, groupNickName}) {\r\n    const color = colors[groupNickName]\r\n    return (\r\n        <Row gutter={8} type='flex'>\r\n            <Col><p>{title}</p></Col>\r\n            <Col><Tag color={color} style={{display: groupNickName ? 'initial': 'none'}}>{groupNickName}</Tag></Col>\r\n        </Row>\r\n    )\r\n}\r\nexport default class MetadataDiscovery extends Component {\r\n    \r\n    state = this.initState\r\n\r\n    componentWillReceiveProps = (o, nextProps) => {\r\n        this.setState(this.initState)\r\n    }\r\n\r\n    get initState()  {\r\n        return {\r\n            metadatas: this.props.globalMetadatas.map(metadata => _.assign(metadata, {isSelected: false}))\r\n        }\r\n    }\r\n\r\n    onTabClick = (value) => {\r\n        //console.log(value)\r\n    }\r\n\r\n    onClose = () => {\r\n        //console.log(this.props.globalMetadatas)\r\n        this.setState(this.initState)\r\n        this.props.onCancel();\r\n    }\r\n\r\n    onSubmitMetadatas = () => {\r\n        const selectedMetadatas = _.filter(this.state.metadatas, {isSelected: true})\r\n        this.setState(this.initState)\r\n        this.props.onSubmitMetadatas(selectedMetadatas)\r\n    }\r\n\r\n    onToggleMetadata = (metadataKey) => () => {\r\n        const oldMetadata = _.find(this.state.metadatas, { 'subGroup': metadataKey })\r\n        oldMetadata.isSelected = !oldMetadata.isSelected\r\n        this.setState({\r\n            metadata: _.assign(this.state.metadatas, oldMetadata)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { isOpen } = this.props\r\n        \r\n        const listContainerStyle = { height: '780px', overflowY: 'auto' }\r\n        const groupedMetadata = _.groupBy(this.state.metadatas, 'group')\r\n        const groupedMetadataItems = _.keys(groupedMetadata).map((groupName, index) => (\r\n            <TabPane tab={groupName} key={index}>\r\n                <List size='large' style={listContainerStyle}>\r\n                    {\r\n                       groupedMetadata[groupName].map(child => (\r\n                           <ListItem \r\n                           key={child.subGroup}\r\n                           actions={[\r\n                           <MetadataButton isSelected={child.isSelected} onToggleMetadata={this.onToggleMetadata(child.subGroup)}/>\r\n                           ]}>\r\n                               <ListItem.Meta\r\n                                title={<TitleBox title={child.subGroup} groupNickName={child.groupNickName} />}\r\n                                description={<p >{child.des}</p>}/>\r\n                            </ListItem>\r\n                       )) \r\n                    }\r\n                </List>\r\n            </TabPane>\r\n        ))\r\n\r\n        return (\r\n            <Drawer \r\n            title=\"Add Configuration\"\r\n            width=\"60%\"\r\n            visible={isOpen}\r\n            onClose={this.onClose}>\r\n                <Search\r\n                enterButton='Search'\r\n                size='large'\r\n                placeholder='Seach Configuration'/>\r\n                <Tabs style={{marginTop: '20px'}} defaultActiveKey=\"0\" onChange={this.onTabClick}>\r\n                    {groupedMetadataItems}\r\n                </Tabs>\r\n                <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    bottom: 0,\r\n                    left: 0,\r\n                    padding: '24px',\r\n                    width: '100%',\r\n                    backgroundColor: 'white'\r\n                }}>\r\n                    <Button\r\n                    block\r\n                    onClick={this.onSubmitMetadatas} \r\n                    type=\"primary\" \r\n                    size='large'>\r\n                        Add\r\n                    </Button>\r\n                </div>\r\n            </Drawer>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport {Col, Button, Divider} from 'antd'\r\nimport BooleanConfig from './BooleanConfig'\r\nimport MetadataItemConfig from './MetadataItemConfig'\r\nimport MetadataDiscovery from './MetadataDiscovery'\r\n\r\nexport default class MetadataSetting extends Component {\r\n\r\n    state = {\r\n        openAddMetadata: false\r\n    }\r\n\r\n    onToggleAddMetadata = () => {\r\n        this.setState({\r\n            openAddMetadata: !this.state.openAddMetadata\r\n        })\r\n    }\r\n\r\n    onSubmitMetadatas = (selectedMetadatas) => {\r\n        this.setState({\r\n            openAddMetadata: false,\r\n        })\r\n        this.props.addMetadataToPanel(selectedMetadatas)\r\n    }\r\n\r\n    render() {\r\n        const { name, metadatas, isChecked, metadataSet } = this.props\r\n        const metadataItems = metadatas.map(metadata => <MetadataItemConfig key={metadata.key} keyName={metadata.key} fileJson={metadata.fileJson} hasFileMetadata={metadata.hasFileMetadata} value={metadata.value} hint={metadata.hint}/>)\r\n\r\n        return (\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <div style={{display:'flex', flexDirection: 'column'}}>\r\n                    <Col span={24}>\r\n                        <h2>Metadata</h2>\r\n                        <span>Following metadata will be applied docset-wide (globalMetadata)</span>\r\n                        <Divider />\r\n                    </Col>\r\n                    <BooleanConfig \r\n                    keyName=\"Accepts community contributions\" \r\n                    des=\"Select if your content accepts community contributions, adds a button to the rendered page which directs external users to a repository to submit pull requests\" \r\n                    checked={isChecked}/>\r\n                    \r\n                    {metadataItems}\r\n                    \r\n                    <Button \r\n                    type=\"dashed\" \r\n                    size='large' \r\n                    icon='plus' \r\n                    style={{width: '100%', marginTop: '10px'}} \r\n                    onClick={this.onToggleAddMetadata}>\r\n                        Add Metadata\r\n                    </Button>\r\n                </div>\r\n                <MetadataDiscovery \r\n                isOpen={this.state.openAddMetadata} \r\n                onSubmitMetadatas={this.onSubmitMetadatas} \r\n                onCancel={this.onToggleAddMetadata}\r\n                globalMetadatas={metadataSet}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Select } from 'antd'\r\n\r\nconst Option = Select.Option\r\n\r\nexport default function OutputConfig({keyName, des, branches, selected}) {\r\n    const options = branches.map(branch => <Option key={branch}>{branch}</Option>)\r\n    \r\n    return (\r\n        <div style={{marginBottom: '20px'}}>\r\n            <h3>{keyName}</h3>\r\n            <Select\r\n            mode=\"tags\"\r\n            style={{ width: '100%' }}\r\n            defaultValue={selected}\r\n            placeholder=\"Input branch to filter\"\r\n            >\r\n                {options}\r\n            </Select>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { List, Input, Button } from 'antd'\r\n\r\nconst ListItem = List.Item\r\n\r\nexport default function EmailConfigs({keyName, des, emails}) {\r\n    const items = emails.map(email => <ListItem key={email} actions={[<a href='/'>Delete</a>]}>{email}</ListItem>)\r\n    \r\n    return (\r\n        <div style={{marginBottom: '20px'}}>\r\n            <h3>{keyName}</h3>\r\n            <span>{des}</span>\r\n            <div style={{display: 'flex', margin: '20px 0 20px 0'}}>\r\n                <Input placeholder='Add email...'/>\r\n                <Button type='primary' icon='plus' style={{marginLeft: '10px'}}>Add email</Button>\r\n            </div>\r\n            <List bordered >\r\n                {items}\r\n            </List>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input,  Row, Tooltip, Icon } from 'antd'\r\n\r\nexport default function StringWithTitleConfig({keyName, des, value}) {\r\n    return (\r\n        <Row style={{marginTop: '20px'}} type='flex' justify='space-between'>\r\n            <div style={{display: 'flex'}}>\r\n            <span style={{fontSize: '16px', color: 'grey', 'fontWeight': '400'}}>{keyName}</span>\r\n                <Tooltip title={des}>\r\n                    <Icon type=\"info-circle\" theme=\"twoTone\" style={{margin: '3px'}}/>\r\n                </Tooltip>\r\n            </div>\r\n            <Input value={value} style={{margin: '10px 0'}} />\r\n        </Row>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport {Divider} from 'antd'\r\nimport OutputConfig from './OutputConfig'\r\nimport EmailConfigs from './EmailConfigs'\r\nimport StringWithTitleConfig from './StringWithTitleConfig'\r\n\r\nexport default class RepoConfigs extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h2>Public Contributor</h2>\r\n                    <Divider />\r\n                    <StringWithTitleConfig \r\n                    keyName='Git Repository URL open to public contributors'\r\n                    des='The url of the git repository open to public contributors. If not specified, use current git repository url.' \r\n                    value='https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md'\r\n                    />\r\n                    <StringWithTitleConfig \r\n                    keyName='Git Repository Branch open to public contributors'\r\n                    des='The branch of the git repository open to public contributors. If not specified, use current git repository branch.'\r\n                    value='master'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h2>Email Notification</h2>\r\n                    <Divider />\r\n                    <EmailConfigs \r\n                    keyName='Build/publish notifications will be sent to these email addresses' \r\n                    emails={['jasoz@microsoft.com', 'zifan@microsoft.com', 'yanzhao@microsoft.com', 'jahe@microsoft.com']} />\r\n                </div>\r\n                <div>\r\n                    <h2>Branch level functionality</h2>\r\n                    <Divider />\r\n                    <OutputConfig \r\n                    keyName=\"Generate PDF on following branches\" \r\n                    branches={['master', 'live', 'test', 'zifan-test']}\r\n                    selected={['master']}/>\r\n                    <OutputConfig \r\n                    keyName=\"Generate intellisense on following  branches\" \r\n                    branches={['master', 'live', 'test', 'zifan-test']}\r\n                    selected={['master', 'live']}/>\r\n                    <OutputConfig \r\n                    keyName=\"Enable bilingual on following branches\" \r\n                    branches={['master', 'live', 'test', 'zifan-test']}\r\n                    selected={['zifan-test', 'test']}/>\r\n                </div>\r\n                <div>\r\n                    <h2>Branch Policy</h2>\r\n                    <Divider />\r\n                    <OutputConfig \r\n                    keyName=\"No build/publish will be trigged on following branches\" \r\n                    branches={['master', 'live', 'test', 'zifan-test']}\r\n                    selected={['live-sxs']}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Drawer,  Button, Form, Input, Tooltip, Icon, Select, Upload } from 'antd'\r\nimport _ from 'lodash'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst TextArea = Input.TextArea\r\nconst formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 16 },\r\n    }\r\n}\r\nconst fullWidthItemLayout = {\r\n    labelCol: {\r\n        span: 24\r\n    },\r\n    wrapperCol: {\r\n        span: 24\r\n    }\r\n}\r\nconst metadataType = ['bool', 'string', 'number', 'object', 'one or many']\r\n\r\nclass MetadataRegisterForm extends Component {\r\n    state = this.initState\r\n    \r\n    get initState() {\r\n        if (this.props.metadataSet) {\r\n            return {\r\n                groups: _.uniq(this.props.metadataSet.map(metadata => metadata.group)),\r\n                names: this.props.metadataSet.map(metadata => metadata.key),\r\n                values: this.props.metadataSet.map(metadata => metadata.value)\r\n            }\r\n        } else {\r\n            return {\r\n                group: [],\r\n                names: []\r\n            }\r\n        }\r\n    }\r\n\r\n    onAddMetadataSet = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                values.key = values.name\r\n                values.group = _.first(values.group)\r\n                this.props.onAddMetadataSet(values)\r\n            }\r\n        });\r\n    }\r\n\r\n    validateValueExist = (key) => (rule, value, callback) => {\r\n        let valueArray = []\r\n        switch(key) {\r\n            case \"name\":\r\n                valueArray = this.state.names\r\n                break;\r\n            case \"value\":\r\n            default:\r\n                valueArray = this.state.values\r\n        }\r\n\r\n        console.log(valueArray, value, key, valueArray.includes(value))\r\n\r\n        if (!valueArray.includes(value)) {\r\n            callback()\r\n        } else {\r\n            callback(`The ${key} name has already exist`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.onAddMetadataSet}>\r\n                <FormItem\r\n                {...formItemLayout}\r\n                label=\"Metadata Name\"\r\n                >\r\n                {getFieldDecorator('name', {\r\n                    rules: [{\r\n                    required: true, message: 'Please input metadata name!',\r\n                    }, {\r\n                    validator: this.validateValueExist('name'),\r\n                    }],\r\n                })(\r\n                    <Input />\r\n                )}\r\n                </FormItem>\r\n                <FormItem\r\n                {...formItemLayout}\r\n                label={(\r\n                    <span>\r\n                      Metadata Value&nbsp;\r\n                      <Tooltip title=\"Value is what your docfx.json key name.\">\r\n                        <Icon type=\"question-circle-o\" />\r\n                      </Tooltip>\r\n                    </span>\r\n                  )}\r\n                >\r\n                {getFieldDecorator('value', {\r\n                    rules: [{\r\n                    required: true, message: 'Please input metadata value!',\r\n                    }, {\r\n                    validator: this.validateValueExist('value'),\r\n                    }],\r\n                })(\r\n                    <Input />\r\n                )}\r\n                </FormItem>\r\n                <FormItem\r\n                {...formItemLayout}\r\n                label='Metadata Type'\r\n                >\r\n                {getFieldDecorator('type', {\r\n                    rules: [{\r\n                    required: true, message: 'Please select metadata type!',\r\n                    }],\r\n                })(\r\n                    <Select placeholder='Select the metadata type'>\r\n                        {metadataType.map(type => (<Option value={type}>{type}</Option>))}\r\n                    </Select>\r\n                )}\r\n                </FormItem>\r\n                <FormItem\r\n                {...formItemLayout}\r\n                label='Metadata Group'\r\n                >\r\n                {getFieldDecorator('group', {\r\n                    rules: [{\r\n                    required: true, message: 'Please select metadata group!',\r\n                    }],\r\n                })(\r\n                    <Select \r\n                    allowClear\r\n                    mode=\"tags\" \r\n                    placeholder='Select the metadata group'\r\n                    notFoundContent='Add new group'>\r\n                        {this.state.groups.map(group => (<Option value={group}>{group}</Option>))}\r\n                    </Select>\r\n                )}\r\n                </FormItem>\r\n                <FormItem\r\n                {...fullWidthItemLayout}\r\n                label='Metadata Description'\r\n                >\r\n                {getFieldDecorator('des', {\r\n                    rules: [{\r\n                    required: true, message: 'Describe this metadata!',\r\n                    }],\r\n                })(\r\n                    <TextArea rows={4}></TextArea>\r\n                )}\r\n                </FormItem>\r\n                <FormItem\r\n                {...fullWidthItemLayout}\r\n                label='Metadata ScreenShot'\r\n                >\r\n                {getFieldDecorator('imgUrl', {\r\n                valuePropName: 'fileList',\r\n                getValueFromEvent: this.normFile,\r\n                })(\r\n                <Upload.Dragger name=\"files\" action='/action.do'>\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <Icon type=\"inbox\" />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\r\n                </Upload.Dragger>\r\n                )}\r\n                </FormItem>\r\n                <FormItem>\r\n                    <Button \r\n                    block\r\n                    type='primary'\r\n                    size='large'\r\n                    htmlType=\"submit\">\r\n                        Add\r\n                    </Button>\r\n                </FormItem>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class MetadataRegister extends Component {\r\n\r\n    \r\n    render() {\r\n        const { onClose, showMetadataRegister, metadataSet, onAddMetadataSet } = this.props\r\n        const MetadataRegistrationForm = Form.create()(MetadataRegisterForm)\r\n\r\n        return (\r\n            <Drawer\r\n            visible={showMetadataRegister}\r\n            onClose={onClose}\r\n            title='Register New Metadata'\r\n            width={450}>\r\n                <MetadataRegistrationForm metadataSet={metadataSet} onAddMetadataSet={onAddMetadataSet}/>\r\n            </Drawer>\r\n        )\r\n    }\r\n}","import { Layout, Menu, Icon, Button, message } from 'antd'\r\nimport React, { Component } from 'react'\r\nimport MetadataSetting from './MetadataSetting'\r\nimport RepoConfigs from './RepoConfigs'\r\nimport _ from 'lodash'\r\nimport '../App.css'\r\nimport MetadataRegister from './MetadataRegister';\r\n\r\nconst { Header, Sider, Content } = Layout\r\n\r\nconst SubMenu = Menu.SubMenu\r\nconst menuName = ['Docset1', 'Docset2', 'Configuration']\r\nconst docset1Metadatas = [\r\n    {\r\n        key: 'feedback_github_repo',\r\n        hasFileMetadata: true,\r\n        value: 'MicrosoftDocs/azure-docs'\r\n    },\r\n    {\r\n        key: 'feedback_product_url',\r\n        value: 'https://feedback.azure.com/forums/34192--general-feedback'\r\n    },\r\n    {\r\n        key: 'breadcrumb_path',\r\n        value: '/azure/bread/toc.json'\r\n    },\r\n    {\r\n        key: 'brand',\r\n        value: 'azure'\r\n    }\r\n]\r\nconst docset2Metadatas = [\r\n    {\r\n        key: 'feedback_product_url',\r\n        hasFileMetadata: true,\r\n        fileJson: '**/*.md',\r\n        value: 'https://feedback.azure.com/forums/34193--general-feedback'\r\n    },\r\n    {\r\n        key: 'breadcrumb_path',\r\n        hasFileMetadata: true,\r\n        fileJson: '**/build/*.yaml',\r\n        value: '/azurelearning/bread/toc.json'\r\n    },\r\n    {\r\n        key: 'brand',\r\n        hasFileMetadata: true,\r\n        fileJson: '**/*.md',\r\n        value: 'azure learning'\r\n    }\r\n]\r\nconst metadataSet = [\r\n    {\r\n        group: 'Feedback',\r\n        key: 'feedback product url',\r\n        value: 'feedback_product_url',\r\n        type: 'string',\r\n        des: 'Config the feedback url for product'\r\n    },\r\n    {\r\n        group: 'Feedback',\r\n        key: 'feedback github repo',\r\n        value: 'feedback_github_repo',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'Feedback',\r\n        key: 'feedback system',\r\n        value: 'feedback_system',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'Feedback',\r\n        key: 'product feedback displaytext',\r\n        value: 'product_feedback_displaytext',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'BreadCrumb',\r\n        key: 'breadcrumb path',\r\n        value: 'breadcrumb_path',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'BreadCrumb',\r\n        key: 'extend breadcrumb',\r\n        value: 'extend_breadcrumb',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'ContributorList',\r\n        key: 'author',\r\n        value: 'author',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'ContributorList',\r\n        key: 'contributors to exclude',\r\n        value: 'contributors_to_exclude',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n]\r\nexport default class NewMetadata extends Component {\r\n    state = {\r\n        collapsed: false,\r\n        selectedContent: 0,\r\n        name: menuName[0],\r\n        docsetMetadata1: docset1Metadatas,\r\n        docsetMetadata2: docset2Metadatas,\r\n        metadataSet: metadataSet,\r\n        showMetadataRegister: false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        })\r\n    }\r\n\r\n    menuClick = (e) => {\r\n        this.setState({\r\n            name: menuName[e.key],\r\n            selectedContent: e.key\r\n        })\r\n    }\r\n\r\n    addMetadataToPanel = (valuesToBeAdded) => {\r\n        valuesToBeAdded = valuesToBeAdded.map(item => {\r\n            let hintValue = null\r\n            if (item.type) {\r\n                //'bool', 'string', 'number', 'object', 'one or many'\r\n                switch (item.type) {\r\n                    case 'bool':\r\n                        hintValue = 'Boolean value: true/false'\r\n                        break;\r\n                    case 'number':\r\n                        hintValue = 'Number value: integer/float/double'\r\n                        break;\r\n                    case 'object':\r\n                        hintValue = 'JSON object value: {\"a\": \"a value\"}'\r\n                        break;\r\n                    case 'one or many':\r\n                        hintValue = 'One or many value: string/string[]'\r\n                        break;\r\n                    case 'string':\r\n                    default:\r\n                        hintValue = 'String value'\r\n                        break;\r\n                }\r\n            }\r\n            item.value = ''\r\n            item.hint = hintValue\r\n            return item\r\n        })\r\n        if (parseInt(this.state.selectedContent) === 0)\r\n        {\r\n            this.setState({\r\n                docsetMetadata1: _.uniqBy(_.concat(this.state.docsetMetadata1, valuesToBeAdded), 'key')\r\n            })\r\n        }\r\n        else \r\n        {\r\n            this.setState({\r\n                docsetMetadata2: _.uniqBy(_.concat(this.state.docsetMetadata2, valuesToBeAdded), 'key')\r\n            })\r\n        }    \r\n    }\r\n\r\n    onAddMetadataSet = (newMetadata) => {\r\n        this.setState({\r\n            metadataSet: _.concat(this.state.metadataSet, newMetadata),\r\n            showMetadataRegister: false\r\n        })\r\n        message.success(\"New metadata has registed.\")\r\n    }\r\n\r\n    onToggleMetadataRegister = () => {\r\n        this.setState({\r\n            showMetadataRegister: !this.state.showMetadataRegister\r\n        })\r\n    }\r\n\r\n    contentRender = (key) => {\r\n        switch (parseInt(key))\r\n        {\r\n            case 2:\r\n                return <RepoConfigs />\r\n            case 1:\r\n                return <MetadataSetting \r\n                name={this.state.name} \r\n                metadatas={this.state.docsetMetadata2} \r\n                isChecked={false} \r\n                metadataSet={this.state.metadataSet}\r\n                addMetadataToPanel={this.addMetadataToPanel} />\r\n            case 0:\r\n            default:\r\n                return <MetadataSetting \r\n                name={this.state.name} \r\n                metadatas={this.state.docsetMetadata1} \r\n                isChecked \r\n                metadataSet={this.state.metadataSet}\r\n                addMetadataToPanel={this.addMetadataToPanel} />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const content = this.contentRender(this.state.selectedContent)\r\n        return (\r\n            <Layout>\r\n            <Sider\r\n                trigger={null}\r\n                collapsible\r\n                collapsed={this.state.collapsed}\r\n                width={220}\r\n            >\r\n                <div className=\"logo\" />\r\n                <Menu \r\n                theme=\"dark\" \r\n                mode=\"inline\" \r\n                defaultSelectedKeys={['0']}\r\n                defaultOpenKeys={['sub1']}\r\n                style={{textAlign: 'left', padding: '20px 5px 20px 5px'}}\r\n                onClick={this.menuClick}\r\n                >\r\n                <SubMenu key=\"sub1\" title={<span><Icon type=\"book\" /><span>Metadata</span></span>}>\r\n                    <Menu.Item key=\"0\">\r\n                        <Icon type=\"book\" />\r\n                        <span>{menuName[0]}</span>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"1\">\r\n                        <Icon type=\"book\" />\r\n                        <span>{menuName[1]}</span>\r\n                    </Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"2\">\r\n                    <Icon type=\"file-text\" />\r\n                    <span>{menuName[2]}</span>\r\n                </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout>\r\n                <Header style={{ background: '#fff', display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\r\n                <div style={{ background: '#fff', fontSize: '20px', fontWeight: '500', textAlign: 'left'}}>\r\n                    <Icon\r\n                    className=\"trigger\"\r\n                    type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n                    onClick={this.toggle}\r\n                    />\r\n                    <span style={{paddingLeft: \"10px\"}}>OPS Settings</span>\r\n                </div>\r\n                <Button type='primary' icon='setting' onClick={this.onToggleMetadataRegister}>\r\n                    Metadata Register\r\n                </Button>\r\n                </Header>\r\n                <Content className=\"main-content\">\r\n                    {content}\r\n                    <MetadataRegister \r\n                    metadataSet={this.state.metadataSet} \r\n                    onAddMetadataSet={this.onAddMetadataSet} \r\n                    onClose={this.onToggleMetadataRegister}\r\n                    showMetadataRegister={this.state.showMetadataRegister}\r\n                    />\r\n                </Content>\r\n            </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Menu, List, Tag, Input, InputNumber, Switch, Badge, Avatar, Icon, Collapse } from 'antd'\r\nimport '../App.css'\r\nimport _ from 'lodash'\r\n\r\nconst typeColorMap = {\r\n    'string': 'magenta',\r\n    'bool': 'green',\r\n    'one or many': 'orange',\r\n    'object': 'blue',\r\n    'number': 'purple' \r\n}\r\n\r\nclass FunctionalItem extends Component {\r\n    getInput = (type, value) => {\r\n        value = value ? value : (type === 'bool' ? false : '') \r\n        switch (type) {\r\n            case 'object':\r\n                return <Input size ='large' placeholder='Accept Json object value' defaultValue={value}/>\r\n            case 'one or many':\r\n                return <Input size ='large' placeholder='Accept one string or a string array' defaultValue={value}/>\r\n            case 'bool':\r\n                return <Switch size ='large' checkedChildren=\"True\" unCheckedChildren=\"False\" defaultChecked={value} />\r\n            case 'number':\r\n                return <InputNumber size ='large' defaultValue={value} />\r\n            case 'string':\r\n                return <Input size ='large' placeholder='Accept string value' value={value}/>\r\n            default:\r\n                return <div />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { item, itemKey } = this.props\r\n        const { key, keyDes, type, value, outDated } = item\r\n        const hasFileMetadata = item.fileMetadata ? true : false\r\n        const fileMetadata = hasFileMetadata ? item.fileMetadata : {}\r\n        const fileMetadataKey = fileMetadata.key\r\n        const fileMetadataType = fileMetadata.type\r\n        const fileMetadataValue = fileMetadata.value\r\n        const fileMetadataDes = fileMetadata.des\r\n\r\n        //console.log(key, des, type, value, outDated, fileMetadata)\r\n\r\n        return (\r\n            <div className=\"function-item-panel\" key={itemKey}>\r\n                <div className=\"function-item-main-panel\">\r\n                    <div className=\"function-item-title\">\r\n                        <h4>\r\n                            {key} <Tag color={typeColorMap[type]} style={{display: type ? 'initial': 'none'}}>{type}</Tag> \r\n                            <br/>\r\n                            <Tag color='red' style={{display: outDated ? 'initial' : 'none'}}>This configuration is under retirement, we don't recommend to use it any longer</Tag>\r\n                        </h4>\r\n                        <p>{keyDes}</p>\r\n                    </div>\r\n                    <div className=\"function-item-sub-panel\">\r\n                        {this.getInput(type, value)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"function-item-file-metadata-panel\">\r\n                    <Collapse bordered={false} style={{display: hasFileMetadata ? 'flex' : 'none', flexDirection: 'column'}}>\r\n                        <Collapse.Panel header=\"Apply to subset of docset only?\" key=\"1\">\r\n                            <div className=\"function-item-title\">\r\n                                <h4>{fileMetadataKey} <Tag color={typeColorMap[fileMetadataType]} style={{display: fileMetadataType ? 'initial': 'none'}}>{fileMetadataType}</Tag> </h4>\r\n                                <p>{fileMetadataDes}</p>\r\n                            </div>\r\n                            <div className=\"function-item-sub-panel\">\r\n                                {this.getInput(fileMetadataType, fileMetadataValue)}\r\n                            </div>\r\n                        </Collapse.Panel>\r\n                    </Collapse>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class FunctionalSubContent extends Component { \r\n    state = {\r\n        selectedMenuKey: '0'\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        if (nextProps && this.props && !_.isEqual(nextProps.subGroups, this.props.subGroups)) {\r\n            this.setState({\r\n                selectedMenuKey: '0'\r\n            })\r\n        }\r\n    } \r\n\r\n    handleSubGroupClick = (e) => {\r\n        this.setState({\r\n            selectedMenuKey: e.key\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const { subGroups, updatedItemNums } = this.props\r\n        const subGroupItems = subGroups ? subGroups : []\r\n        const subGroupNames = _.keys(subGroupItems)\r\n        let subGroupItemHasOutDatedValues = _.clone(subGroupItems)\r\n        \r\n        subGroupNames.forEach(name => {\r\n            _.set(subGroupItemHasOutDatedValues, name, !_.isEmpty(_.filter(subGroupItems[name], item => item.outDated)))\r\n        })\r\n        const selectedSubGroupName = subGroupNames[this.state.selectedMenuKey]\r\n        const selectedSubGroupDes = _.first(subGroupItems[selectedSubGroupName]) ? _.first(subGroupItems[selectedSubGroupName]).des : null\r\n        const selectedSubGroupImgUrl =  _.first(subGroupItems[selectedSubGroupName]) ? _.first(subGroupItems[selectedSubGroupName]).imgurl : null\r\n\r\n        //console.log(subGroupItems[selectedSubGroupName])\r\n\r\n        return (\r\n            <div style={{ display: 'flex', justifyContent: 'space-between'}}>\r\n                <Menu\r\n                    onClick={this.handleSubGroupClick}\r\n                    style={{ width: '18%' }}\r\n                    defaultSelectedKeys={[this.state.selectedMenuKey]}\r\n                    mode=\"inline\"\r\n                >\r\n                    { subGroupNames.map((name, idx) => \r\n                        <Menu.Item key={idx}>\r\n                            <Badge dot={updatedItemNums ? updatedItemNums[name] > 0 : false}>\r\n                                {name} <Icon type='warning' theme=\"twoTone\" twoToneColor=\"red\" style={{ \r\n                                    display: (subGroupItemHasOutDatedValues && subGroupItemHasOutDatedValues[name]) ? 'initial' : 'none',\r\n                                }} />\r\n                            </Badge>\r\n                        </Menu.Item>\r\n                    )\r\n                    }\r\n                </Menu>\r\n                <div style={{ width: '80%' }}>\r\n                    <div style={{border: '1px black'}}>\r\n                    <h2>{selectedSubGroupName}</h2>\r\n                    <blockquote>{selectedSubGroupDes}</blockquote>\r\n                    <img style={{ width: 450 }} src={selectedSubGroupImgUrl} alt='no img'/>\r\n                    </div>\r\n                    <div>\r\n                        {subGroupItems[selectedSubGroupName].map((item, idx) => <FunctionalItem item={item} itemKey={idx}/>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react'\r\nimport {Col, Divider} from 'antd'\r\nimport MetadataItemConfig from './MetadataItemConfig'\r\nimport _ from 'lodash'\r\n\r\nexport default function OldMetadataSetting({ name, metadatas }) {\r\n\r\n    console.log(metadatas)\r\n    const metadataItems = metadatas.map(metadata => <MetadataItemConfig showFileMetadata={false} key={metadata.key} keyName={metadata.key} fileJson={metadata.fileJson} hasFileMetadata={metadata.hasFileMetadata} value={metadata.value}/>)\r\n    \r\n    return (\r\n        <div style={{padding : '0 10px'}}>\r\n            <div style={{display:'flex', flexDirection: 'column'}}>\r\n                <Col span={24}>\r\n                    <h2>Metadata</h2>\r\n                    <span>Following metadata will be applied docset-wide (globalMetadata)</span>\r\n                    <Divider />\r\n                </Col>\r\n                {metadataItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { Tabs, Button, message, Badge } from 'antd'\r\nimport MetadataDiscovery from './MetadataDiscovery'\r\nimport FunctionalSubContent from './FunctionalSubContent'\r\nimport OldMetadataSetting from './OldMetadataSetting'\r\nimport _ from 'lodash'\r\n\r\nconst Tab = Tabs.TabPane\r\nconst metadataSet = [\r\n    {\r\n        group: 'Page element',\r\n        subGroup: 'Title suffix',\r\n        keys: [\r\n            {\r\n                key: 'Title Suffix',\r\n                type: 'string',\r\n                keyDes: 'Specify a suffix in page title'\r\n            }\r\n        ],\r\n        imgurl: '/screenshot_of_titlesuffix.png',\r\n        des: <p>Specify a suffix in page title, usually it is a product or brand.<br/>The page tile:<br/>Define a title in the browser toolbar<br/>Provide a title for the page when it is added to favorites<br/>Display a title for the page in search-engine results'</p>\r\n    },\r\n    {\r\n        group: 'Page element',\r\n        subGroup: 'Edit button',\r\n        keys: [\r\n            {\r\n                key: 'Accept public edits?',\r\n                type: 'bool',\r\n                keyDes: 'Enable to allow the public contribution'\r\n            },\r\n            {\r\n                key: 'The URL of the Git Repository open to public contributes',\r\n                type: 'string',\r\n                keyDes: 'Specify the URL of the Git Repository open to public contributes'\r\n            },\r\n            {\r\n                key: 'The branch of the Git Repository open to public contributes',\r\n                type: 'string',\r\n                keyDes: 'Specify the Branch of the Git Repository open to public contributes'\r\n            },\r\n            {\r\n                key: '[Optional] Set up automatic private-public synchronization',\r\n                keyDes: 'If your content repository is private, and the repository open to public contributes is another public repo, you can set up automatic syncing between the private repo and the public repo.'\r\n            }\r\n        ],\r\n        imgurl: '/screenshot_of_editbutton.png',\r\n        des: 'By enabling it the docs site will render a Edit button in the right upper corner of the page, and the Edit button will redirect the end users to a public repository where community contributions to the content can be added.'\r\n    },\r\n    {\r\n        group: 'Page element',\r\n        subGroup: 'Feedback button',\r\n        keys: [\r\n            {\r\n                key: 'The URL of product feedback',\r\n                type: 'string',\r\n                keyDes: 'To provide product feedback, the customer clicks the \"Give product feedback\" button. The web page that is specified here for product feedback opens.'\r\n            },\r\n            {\r\n                key: 'The URL of documentation feedback',\r\n                type: 'string',\r\n                keyDes: 'If the customer wants to provide new documentation feedback or comment on an existing issue, they click the button that says \"Sign in to give documentation feedback\".'\r\n            }\r\n        ],\r\n        imgurl: '/screenshot_of_feedback.png',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback'\r\n    },\r\n    {\r\n        group: 'Page element',\r\n        key: 'Feedback',\r\n        subGroup: 'Download PDF button',\r\n        type: 'string',\r\n        des: ''\r\n    },\r\n    {\r\n        group: 'Page element',\r\n        key: 'Archived page disclaimer',\r\n        subGroup: 'Search button (search scope)',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Page element',\r\n        key: 'Language selector',\r\n        subGroup: 'Language selector',\r\n        groupNickName: 'Reference',\r\n        type: 'one or many'\r\n    },\r\n    {\r\n        group: 'Page element',\r\n        key: 'Language selector',\r\n        groupNickName: 'Archived',\r\n        subGroup: 'Archived page disclaimer',\r\n        type: 'one or many'\r\n    },\r\n    {\r\n        group: 'Navigation on page',\r\n        key: 'Header/footer',\r\n        subGroup: 'Header/footer',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Navigation on page',\r\n        key: 'Header/footer',\r\n        subGroup: 'Breadcrumb',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Navigation on page',\r\n        key: 'Header/footer',\r\n        subGroup: 'Fusion TOC',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'URL',\r\n        key: 'Header/footer',\r\n        subGroup: 'Base URL',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'URL',\r\n        key: 'Header/footer',\r\n        subGroup: 'Shared base path',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'URL',\r\n        key: 'Header/footer',\r\n        subGroup: 'Redirection',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Versioning',\r\n        key: 'Header/footer',\r\n        subGroup: 'Moniker range',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Localization',\r\n        key: 'Header/footer',\r\n        subGroup: 'Bilingual (side by side)',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Cross Repository',\r\n        key: 'Header/footer',\r\n        subGroup: 'Cross Repository Reference (CRR)',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Cross Repository',\r\n        key: 'Header/footer',\r\n        subGroup: 'XRef',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Build output',\r\n        key: 'Header/footer',\r\n        subGroup: 'PDF',\r\n        type: 'number'\r\n    },\r\n    {\r\n        group: 'Build output',\r\n        key: 'Header/footer',\r\n        subGroup: 'Intellisense',\r\n        type: 'number'\r\n    },\r\n]\r\n\r\nexport default class FunctionalSetting extends Component {\r\n    state = {\r\n        openAddMetadata: false,\r\n        updatedItemNums: {}\r\n    }\r\n\r\n    getGroupedCount = (metadatas) => {\r\n        return metadatas.reduce((result, metadata) => {\r\n            const subGroup = metadata.subGroup\r\n            if (!result.hasOwnProperty(subGroup)) {\r\n                result[subGroup] = 1\r\n            } else {\r\n                result[subGroup] ++\r\n            }\r\n            return result\r\n        }, {})\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n       \r\n        //console.log(nextProps)\r\n        if (this.props.docsetName === nextProps.docsetName) {\r\n            const oldMetadatasNum = this.getGroupedCount(this.props.metadatas)\r\n            const newMetadatasNum = this.getGroupedCount(nextProps.metadatas)\r\n\r\n            //console.log(oldMetadatasNum, newMetadatasNum)\r\n            this.setState({\r\n                updatedItemNums: _.mapValues(newMetadatasNum, (value, key) => \r\n                    value - (oldMetadatasNum[key] ? oldMetadatasNum[key] : 0)\r\n                )\r\n            })\r\n        } else {\r\n            this.setState({\r\n                updatedItemNums: {}\r\n            })\r\n        }\r\n    }\r\n\r\n    onClickTabs = (key) => {\r\n        const newUpdatedItemNums = _.set(this.state.updatedItemNums, key, 0)\r\n        this.setState({\r\n            updatedItemNums: newUpdatedItemNums\r\n        })\r\n    }\r\n\r\n    onToggleAddMetadata = () => {\r\n        this.setState({\r\n            openAddMetadata: !this.state.openAddMetadata\r\n        })\r\n    }\r\n\r\n    onSubmitMetadatas = (newMetadatas) => {\r\n        this.setState({\r\n            openAddMetadata: false\r\n        })\r\n        this.props.onSubmitMetadatas(newMetadatas)\r\n    }\r\n\r\n    onFakeChangeMetadatas = () => {\r\n        message.success('New functinonal settings applied!')\r\n    }\r\n\r\n    onRenderPages = (group, subGroupItems, des) => {\r\n        if (group === 'Metadata') {\r\n            return (\r\n                <OldMetadataSetting\r\n                metadatas={subGroupItems[group]}\r\n                name={group}\r\n                des={des}\r\n                />\r\n            )\r\n        } else {\r\n            return  (\r\n                <FunctionalSubContent \r\n                subGroups={subGroupItems} \r\n                updatedItemNums={this.state.updatedItemNums} />\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { metadatas, docsetName } = this.props\r\n        const groupedItems = _.groupBy(metadatas, 'group')\r\n\r\n        const tabItems = _.keys(groupedItems).map(group => {\r\n            const subGroupItems = _.groupBy(groupedItems[group], 'subGroup')\r\n\r\n            //Filter the group level has updated\r\n            const didUpdated = this.state.updatedItemNums ? \r\n            !_.isEmpty(_.filter(groupedItems[group], groupItems => this.state.updatedItemNums[groupItems.subGroup] > 0))\r\n            :\r\n            false\r\n            //console.log(groupedItems[group], this.state.updatedItemNums)\r\n            return (\r\n                <Tab tab={<Badge dot={didUpdated}><p>{group}</p></Badge>} key={group}>\r\n                    {this.onRenderPages(group, subGroupItems, groupedItems[group].des)} \r\n                </Tab>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <h2>{docsetName}</h2>\r\n                    <div>\r\n                        <Button type='dashed' icon='plus' onClick={this.onToggleAddMetadata}>\r\n                            Add Config\r\n                        </Button>\r\n                        <Button type=\"primary\" onClick={this.onFakeChangeMetadatas} style={{marginLeft: '10px'}}>\r\n                            Save\r\n                        </Button>\r\n                    </div>  \r\n                </div>                \r\n                <Tabs onChange={this.onClickTabs} type='card' style={{marginTop: '20px'}}>\r\n                    {tabItems}\r\n                </Tabs>\r\n                <MetadataDiscovery \r\n                    isOpen={this.state.openAddMetadata} \r\n                    onSubmitMetadatas={this.onSubmitMetadatas} \r\n                    onCancel={this.onToggleAddMetadata}\r\n                    globalMetadatas={metadataSet}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Layout, Menu, Icon, Button, message, Tabs } from 'antd'\r\nimport React, { Component } from 'react'\r\nimport _ from 'lodash'\r\nimport FunctionalSetting from './FunctionalSetting'\r\n\r\nconst { Header, Sider, Content } = Layout\r\n\r\nconst docset1Metadatas = [\r\n    {\r\n        key: 'The URL of product feedback',\r\n        subGroup: 'Feedback button',\r\n        group: 'Page element',\r\n        value: 'https://feedback.azure.com/forums/34192--general-feedback',\r\n        type: 'string',\r\n        keyDes: 'To provide product feedback, the customer clicks the \"Give product feedback\" button. The web page that is specified here for product feedback opens.',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback',\r\n        imgurl: '/screenshot_of_feedback.png',\r\n        fileMetadata: {\r\n            key: 'Apply the configuration to subset of docset',\r\n            des: 'You need to provide a list of GitHub file path and feedback URL',\r\n            value: '{\"path1\": \"url1\", \"path2\": \"url2\"}',\r\n            type: 'object'\r\n        }\r\n    },\r\n    {\r\n        key: 'The URL of documentation feedback',\r\n        subGroup: 'Feedback button',\r\n        group: 'Page element',\r\n        value: 'https://github.com/azure/azure-rest-api-specs',\r\n        type: 'string',\r\n        keyDes: 'If the customer wants to provide new documentation feedback or comment on an existing issue, they click the button that says \"Sign in to give documentation feedback\".',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback',\r\n    },\r\n    {\r\n        group: 'Navigation on page',\r\n        key: 'Breadcrumb path',\r\n        subGroup: 'Breadcrumb',\r\n        value: '/azure/bread/toc.json',\r\n        type: 'string'\r\n    },\r\n    {\r\n        group: 'Metadata',\r\n        subGroup: 'Metadata',\r\n        key: 'ms.date',\r\n        value: '11/28/2018',\r\n        type: 'string'\r\n    },\r\n    {\r\n        group: 'Metadata',\r\n        subGroup: 'Metadata',\r\n        key: 'ms.topic',\r\n        value: 'article',\r\n        type: 'string'\r\n    }\r\n]\r\nexport default class Metadata extends Component {\r\n    state = {\r\n        name: 'Metadata Config',\r\n        metadatas: docset1Metadatas\r\n    }\r\n\r\n    onAddMetadata = () => {\r\n        this.setState({\r\n            metadatas: _.concat(this.state.metadatas, { key:'', value: '' })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n            <Sider\r\n                trigger={null}\r\n                collapsible\r\n                collapsed={this.state.collapsed}\r\n                width={220}\r\n            >\r\n                <div className=\"logo\" />\r\n                <Menu \r\n                theme=\"dark\" \r\n                mode=\"inline\" \r\n                defaultSelectedKeys={['0']}\r\n                style={{textAlign: 'left', padding: '20px 5px 20px 5px'}}\r\n                onClick={this.menuClick}\r\n                >\r\n                    <Menu.Item key={0}>\r\n                        <Icon type=\"book\" />\r\n                        <span>{this.state.name}</span>\r\n                    </Menu.Item>   \r\n                </Menu>\r\n            </Sider>\r\n            <Layout>\r\n                <Header style={{ background: '#fff'}}>\r\n                <div style={{ background: '#fff', fontSize: '20px', fontWeight: '500', textAlign: 'left'}}>\r\n                    <Icon\r\n                    className=\"trigger\"\r\n                    type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n                    onClick={this.onToggleCollapsed}\r\n                    />\r\n                    <span style={{paddingLeft: \"10px\"}}>OPS Metadata</span>\r\n                </div>\r\n                </Header>\r\n                <Content className=\"main-content-for-functional\">\r\n                    <FunctionalSetting\r\n                    metadatas={this.state.metadatas}\r\n                    docsetName={this.state.name}\r\n                    />     \r\n                </Content>\r\n            </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Layout, Menu, Icon, Button, message } from 'antd'\r\nimport FunctionalSetting from './FunctionalSetting';\r\nimport _ from 'lodash'\r\n\r\nconst { Header, Sider, Content } = Layout\r\nconst menuNames = ['Readable Config', 'Config Discovery', 'Config Deprecation']\r\nconst docset1Metadatas = [\r\n    {\r\n        key: 'The URL of product feedback',\r\n        subGroup: 'Feedback button',\r\n        group: 'Page element',\r\n        value: 'https://feedback.azure.com/forums/34192--general-feedback',\r\n        type: 'string',\r\n        keyDes: 'To provide product feedback, the customer clicks the \"Give product feedback\" button. The web page that is specified here for product feedback opens.',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback',\r\n        imgurl: '/screenshot_of_feedback.png',\r\n        fileMetadata: {\r\n            key: 'Apply the configuration to subset of docset',\r\n            des: 'You need to provide a list of GitHub file path and feedback URL',\r\n            value: '{\"path1\": \"url1\", \"path2\": \"url2\"}',\r\n            type: 'object'\r\n        }\r\n    },\r\n    {\r\n        key: 'The URL of documentation feedback',\r\n        subGroup: 'Feedback button',\r\n        group: 'Page element',\r\n        value: 'https://github.com/azure/azure-rest-api-specs',\r\n        type: 'string',\r\n        keyDes: 'If the customer wants to provide new documentation feedback or comment on an existing issue, they click the button that says \"Sign in to give documentation feedback\".',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback',\r\n    },\r\n    {\r\n        group: 'Navigation on page',\r\n        key: 'Breadcrumb path',\r\n        subGroup: 'Breadcrumb',\r\n        value: '/azure/bread/toc.json',\r\n        type: 'string'\r\n    }\r\n]\r\nconst docset2Metadatas = [\r\n    \r\n]\r\n\r\nconst docset3Metadatas = [\r\n    {\r\n        key: 'The URL of product feedback',\r\n        subGroup: 'Feedback button',\r\n        group: 'Page element',\r\n        value: 'https://feedback.azure.com/forums/34192--general-feedback',\r\n        type: 'string',\r\n        outDated: true,\r\n        keyDes: 'To provide product feedback, the customer clicks the \"Give product feedback\" button. The web page that is specified here for product feedback opens.',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback',\r\n        imgurl: '/screenshot_of_feedback.png'\r\n    },\r\n    {\r\n        key: 'The URL of documentation feedback',\r\n        subGroup: 'Feedback button',\r\n        group: 'Page element',\r\n        value: 'https://github.com/azure/azure-rest-api-specs',\r\n        type: 'string',\r\n        keyDes: 'If the customer wants to provide new documentation feedback or comment on an existing issue, they click the button that says \"Sign in to give documentation feedback\".',\r\n        des: 'Add the documentation feedback control which directs users to submit product or documentation feedback',\r\n    },\r\n    {\r\n        subGroup: 'Edit button',\r\n        group: 'Page element',\r\n        key: 'Accept public edits?',\r\n        type: 'bool',\r\n        value: true,\r\n        imgurl: '/screenshot_of_editbutton.png',\r\n        keyDes: 'Enable to allow the public contribution',\r\n        des: 'By enabling it the docs site will render a Edit button in the right upper corner of the page, and the Edit button will redirect the end users to a public repository where community contributions to the content can be added.'\r\n    },\r\n    {\r\n        subGroup: 'Edit button',\r\n        group: 'Page element',\r\n        key: 'The URL of the Git Repository open to public contributes',\r\n        type: 'string',\r\n        value: 'https://github.com/MicrosoftDocs/engineering',\r\n        keyDes: 'Specify the URL of the Git Repository open to public contributes',\r\n        des: ''\r\n    },\r\n    {\r\n        subGroup: 'Edit button',\r\n        group: 'Page element',\r\n        key: 'The branch of the Git Repository open to public contributes',\r\n        type: 'string',\r\n        value: 'master',\r\n        keyDes: 'Specify the Branch of the Git Repository open to public contributes',\r\n        des: ''\r\n    },\r\n    {\r\n        subGroup: 'Edit button',\r\n        group: 'Page element',\r\n        key: '[Optional] Set up automatic private-public synchronization',\r\n        des: '',\r\n        keyDes: 'If your content repository is private, and the repository open to public contributes is another public repo, you can set up automatic syncing between the private repo and the public repo.'\r\n    },\r\n    {\r\n        key: 'Title Suffix',\r\n        subGroup: 'Title suffix',\r\n        group: 'Page element',\r\n        type: 'string',\r\n        value: 'Xamarin',\r\n        imgurl: '/screenshot_of_titlesuffix.png',\r\n        keyDes: 'Specify a suffix in page title',\r\n        des: <p>Specify a suffix in page title, usually it is a product or brand.<br/>The page tile:<br/>Define a title in the browser toolbar<br/>Provide a title for the page when it is added to favorites<br/>Display a title for the page in search-engine results'</p>\r\n    },\r\n    {\r\n        group: 'Navigation on page',\r\n        key: 'Breadcrumb path',\r\n        subGroup: 'Breadcrumb',\r\n        value: '/azure/bread/toc.json',\r\n        type: 'string'\r\n    }\r\n]\r\n\r\nconst docsetsMetadatas = [docset1Metadatas, docset2Metadatas, docset3Metadatas]\r\n\r\nexport default class Functional extends Component {\r\n    state = {\r\n        collapsed: false,\r\n        selectedContent: 0,\r\n        name: menuNames[0],\r\n        metadatas: docsetsMetadatas[0]\r\n    }\r\n\r\n    menuClick = (e) => {\r\n        this.setState({\r\n            name: menuNames[e.key],\r\n            selectedContent: e.key,\r\n            metadatas: docsetsMetadatas[e.key]\r\n        })\r\n    }\r\n\r\n    onToggleCollapsed = () => {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        })\r\n    }\r\n\r\n    onSubmitMetadatas = (valuesToBeAdded) => {\r\n        // flat the metadataSets\r\n        const flattenMetadatas = _.flatMap(valuesToBeAdded, value => {\r\n            return value.keys ? value.keys.map(key => _.assign(key, value)) : []\r\n        })\r\n        this.setState({\r\n            metadatas: _.uniqBy(_.concat(this.state.metadatas, flattenMetadatas), 'key')\r\n        })\r\n        message.success(\"Metadatas has added.\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n            <Sider\r\n                trigger={null}\r\n                collapsible\r\n                collapsed={this.state.collapsed}\r\n                width={220}\r\n            >\r\n                <div className=\"logo\" />\r\n                <Menu \r\n                theme=\"dark\" \r\n                mode=\"inline\" \r\n                defaultSelectedKeys={['0']}\r\n                defaultOpenKeys={['sub1']}\r\n                style={{textAlign: 'left', padding: '20px 5px 20px 5px'}}\r\n                onClick={this.menuClick}\r\n                >\r\n                    {\r\n                        menuNames.map((name, idx) => \r\n                        <Menu.Item key={idx}>\r\n                            <Icon type=\"book\" />\r\n                            <span>{name}</span>\r\n                        </Menu.Item>)\r\n                    }\r\n                </Menu>\r\n            </Sider>\r\n            <Layout>\r\n                <Header style={{ background: '#fff'}}>\r\n                <div style={{ background: '#fff', fontSize: '20px', fontWeight: '500', textAlign: 'left'}}>\r\n                    <Icon\r\n                    className=\"trigger\"\r\n                    type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n                    onClick={this.onToggleCollapsed}\r\n                    />\r\n                    <span style={{paddingLeft: \"10px\"}}>OPS Configuration</span>\r\n                </div>\r\n                </Header>\r\n                <Content className=\"main-content-for-functional\">\r\n                    <FunctionalSetting\r\n                    metadatas={this.state.metadatas}\r\n                    docsetName={this.state.name}\r\n                    onToggleAddMetadata={this.onToggleAddMetadata}\r\n                    onSubmitMetadatas={this.onSubmitMetadatas}\r\n                    />\r\n                </Content>\r\n            </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport './App.css'\nimport NewMetadata from './components/NewMetadata'\nimport Metadata from './components/Metadata'\nimport Functional from './components/Functional';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route exact path='/' component={NewMetadata}/>\n        <Route path='/metadata' component={Metadata}/>\n        <Route path='/manage' component={Functional}/>\n      </div>\n    </Router>\n  )\n}"],"sourceRoot":""}